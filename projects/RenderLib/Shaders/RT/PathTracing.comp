#version 460

#define BIND_SCENE 1
#define BIND_RENDERER_SET 1

#ifndef FORCE_COSINE_SAMPLING 
#define FORCE_COSINE_SAMPLING 0
#endif

#define I_WANT_TO_DEBUG 0
#define DEBUG_ENABLE_DEBUG_GLOBAL_SIGNAL 0
#include <ShaderLib:/Debug/DebugBuffers.glsl>

#include "../common.glsl"

#include <ShaderLib:/RayTracingCommon.glsl>

#define SHADING_SHADOW_METHOD SHADING_SHADOW_RAY_TRACE
#include "../shading.glsl"

#include <ShaderLib:/Maths/transforms.glsl>

layout(local_size_x = 16, local_size_y = 16) in;

layout(SHADER_DESCRIPTOR_BINDING + 1) uniform PT_UBO
{
	uint value;
} pt_ubo;

layout(SHADER_DESCRIPTOR_BINDING + 2, rgba32f) uniform restrict writeonly image2D Target;

layout(push_constant) uniform PushConstant
{
	uint value;
} _pc;

#define MAX_DEPTH 5
#define LIGHT_SAMPLES 16

#if DEBUG_ENABLE_DEBUG_GLOBAL_SIGNAL
const uvec2 debug_pixel = uvec2(500, 500);
Caret caret;
#endif

struct BSDFSample
{
	vec3 direction;
	vec3 bsdf;
	float pdf;
};

BSDFSample sampleBSDF(const in GeometryShadingInfo gsi, vec3 wo, const in PBMaterialSampleData material, inout rng_t rng)
{
	BSDFSample res;
	res.pdf = 1.0f;

	const vec3 oriented_normal = (gsi.shading_normal);
	const vec3 normal = dot(oriented_normal, wo) < 0 ? -oriented_normal : oriented_normal;
	const mat3 local_to_world_basis = BasisFromDir(normal);
	const vec3 reflected = reflect(-wo, normal);

	const float alpha = sqr(material.roughness);
	const float alpha2 = sqr(alpha);
	const float specular_k = sqr(material.roughness + 1) / 8;

	const float cos_theta_o = dot(normal, wo);

	const vec3 F0 = lerp(vec3(0.04), material.albedo, material.metallic);

	MicrofacetApproximation approx = EstimateMicrofacetApprox(cos_theta_o, material.roughness, material.metallic);

	const bool has_dielectric = material.roughness == 0.0f;

	const float specular_selection = randomFloat01(rng);
	const bool sample_specular = specular_selection < approx.specular_weight;

	if(sample_specular && has_dielectric)
	{
		res.direction = reflected;
		res.pdf = approx.specular_weight;
		res.bsdf = F0;
	}
	else
	{
		float cosine_pdf = 0.0f;
		float specular_pdf = 0.0f;
		
		const mat3 reflected_basis = BasisFromDir(reflected);

#if FORCE_COSINE_SAMPLING
		approx.specular_weight = 0.0f;
		if(false)
#else
		if(sample_specular)
#endif
		{
			const vec3 local_direction = GenerateRandomSpecularDirection(approx.shininess, rng);
			res.direction = reflected_basis * local_direction;
			specular_pdf = EvaluateShinyLobe(reflected, res.direction, approx.shininess);
			cosine_pdf = dot(res.direction, normal) * oo_PI;

#if DEBUG_ENABLE_DEBUG_GLOBAL_SIGNAL
			if(_g_debug_signal)
			{
				caret = pushToDebugPixLn(specular_shininess, caret);
				caret = pushToDebugPixLn(specular_weight, caret);
				caret = pushToDebugPixLn(vec2(specular_pdf, cosine_pdf), caret);
				
			}
#endif
		}
		else
		{
			const vec3 local_direction = randomCosineDirOnHemisphere(rng);
			res.direction = local_to_world_basis * local_direction;
			specular_pdf = EvaluateShinyLobe(reflected, res.direction, approx.shininess);
			cosine_pdf = local_direction.z * oo_PI;
		}
		res.bsdf = evaluateBSDF(gsi, wo, res.direction, material);
		res.pdf = lerp(cosine_pdf, specular_pdf, approx.specular_weight);
		
		// {
		// 	const vec3 h = normalize(wo + res.direction);

		// 	const float cos_theta_geom_i = dot(gsi.geometry_normal, res.direction);
		// 	const float cos_theta_geom_o = dot(gsi.geometry_normal, wo);
		// 	const bool same_hemisphere = sign(cos_theta_geom_i) == sign(cos_theta_geom_o);

		// 	float b = 0;
		// 	if(same_hemisphere)
		// 	{
		// 		b = 1;
		// 	}
		// 	//res.bsdf = b.xxx;
		// 	res.pdf = 1.;
		// }

#if DEBUG_ENABLE_DEBUG_GLOBAL_SIGNAL
		if(_g_debug_signal)
		{
			caret = pushToDebugPixLn(res.bsdf, caret);			
			caret = pushToDebugPixLn(res.pdf, caret);			
			caret = pushToDebugPixLn(res.bsdf / res.pdf, caret);			
		}
#endif
	}
	return res;
}

uint drawLight(inout rng_t rng, out float pdf)
{	
	pdf = 0;
	const uint num_lights = scene_ubo.num_lights;
	uint res = randomU32(rng) % num_lights;
	pdf = 1.0 / float(num_lights);
	return res;
}

// TODO add geometry normal
vec3 drawLightSample(const in GeometryShadingInfo vertex, vec3 wo, const in PBMaterialSampleData material, inout rng_t rng)
{
	vec3 res = 0..xxx;
	float pdf = 0;
	const uint light_id = drawLight(rng, pdf);

	const vec3 normal = vertex.shading_normal;

	LightSample light_sample = getLightSample(light_id, vertex.position, normal, 0);
	pdf *= light_sample.pdf;
	if(pdf > 0 && nonZero(light_sample.Le))
	{
		const vec3 bsdf = evaluateBSDF(vertex, wo, light_sample.direction_to_light, material);
		const float cos_theta = abs(dot(light_sample.direction_to_light, vertex.shading_normal));
		res = light_sample.Le * bsdf * cos_theta / pdf;

		if(nonZero(res))
		{
			res *= computeShadow(vertex.position, normal, light_sample);
		}
	}

	return res;
}

Vertex transformVertex(mat4x3 matrix, mat3 dir_mat, Vertex v)
{
	Vertex res;
	res.position = matrix * vec4(v.position, 1);
	res.normal = dir_mat * v.normal;
	res.tangent = dir_mat * v.tangent;
	res.uv = v.uv;
	return res;
}

Vertex transformVertex(mat4x3 matrix, Vertex v)
{
	return transformVertex(matrix, DirectionMatrix(mat3(matrix)), v);
}

Vertex normalize(Vertex v)
{
	v.normal = normalize(v.normal);
	v.tangent = normalize(v.tangent);
	return v;
}



vec3 trace(Ray ray, inout rng_t rng)
{
	vec3 res = 0..xxx;
	const uint cull_mask = 0xFF;
	vec2 range = vec2(0, 1000);

	vec3 throughput = 1..xxx;

	int depth = 0;
	while(depth < MAX_DEPTH)
	{
		RayQuery_t rq;
		TraceSceneRayQuery(rq, ray, range);

		if(rayQueryGetIntersectionTypeEXT(rq, true) == gl_RayQueryCommittedIntersectionNoneEXT)
		{
			const vec3 sky = scene_ubo.sky;
			res += (throughput * sky);
			break;
		}
		else
		{
			const vec3 wo = -ray.direction;

			const uint custom_index = rayQueryGetIntersectionInstanceCustomIndexEXT(rq, true);
			const uint instance_index = rayQueryGetIntersectionInstanceIdEXT(rq, true);
			const uint sbt_index = rayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetEXT(rq, true);
			const uint geometry_index = rayQueryGetIntersectionGeometryIndexEXT(rq, true);
			const uint object_index = custom_index;
			const int primitive_id = rayQueryGetIntersectionPrimitiveIndexEXT(rq, true);
			const vec2 barycentrics = rayQueryGetIntersectionBarycentricsEXT(rq, true);
			const mat4x3 object_to_world = rayQueryGetIntersectionObjectToWorldEXT(rq, true);
			const mat3 object_to_world_4dir = DirectionMatrix(mat3(object_to_world));

			SceneObjectReference hit_object_ref = scene_objects_table.table[object_index];
			
			const MeshHeader mesh_header = scene_mesh_headers[hit_object_ref.mesh_id].headers;
			const uvec3 vertices_id = getSceneMeshTriangleVerticexIndices(hit_object_ref.mesh_id, primitive_id, mesh_header.flags);
#if SHADER_RAY_TRACING_POSITION_FETCH_AVAILABLE && 0
			const mat3 triangle_positions = GetQueryIntersectionTriangleVertexPositionsCommitted(rq);
#else 
			const mat3 triangle_positions = readSceneTriangleVertexPositions(hit_object_ref.mesh_id, vertices_id);
#endif
			const vec3 geometry_normal_object = ComputeTriangleNormal(triangle_positions);
			const vec3 geometry_normal_world = normalize(object_to_world_4dir * geometry_normal_object);
			const Vertex vertex = interpolateSceneVertex(hit_object_ref.mesh_id, vertices_id, barycentrics);
			const Vertex world_vertex = normalize(transformVertex(object_to_world, vertex));
			
			GeometryShadingInfo gsi;
			gsi.position = world_vertex.position;
			gsi.geometry_normal = geometry_normal_world;
#if SHADING_FORCE_MAX_NORMAL_LEVEL >= SHADING_NORMAL_LEVEL_VERTEX 
			gsi.vertex_shading_normal = world_vertex.normal;
#else
			gsi.vertex_shading_normal = gsi.geometry_normal;
#endif
			gsi.vertex_shading_tangent = world_vertex.tangent;
			const vec3 shading_bt = cross(gsi.vertex_shading_tangent, gsi.vertex_shading_normal);
			const mat3 shading_TBN = mat3(gsi.vertex_shading_tangent, shading_bt, gsi.vertex_shading_normal);
			PBMaterialSampleData material = readMaterial(hit_object_ref.material_id, vertex.uv);
			if(material.alpha == 0.0)
			{
				//throughput *= vec3(1, 0, 0);
				//ray.origin = gsi.position;
				//continue;
			}
#if SHADING_FORCE_MAX_NORMAL_LEVEL >= SHADING_NORMAL_LEVEL_TEXTURE
			gsi.shading_normal = shading_TBN * material.normal;
#else
			gsi.shading_normal = gsi.vertex_shading_normal;
#endif

			if(false)
			{
				res = gsi.shading_normal * 0.5 + 0.5;
				break;
			}
			

			vec3 light_samples = 0..xxx;
			for(uint l = 0; l < LIGHT_SAMPLES; ++l)
			{
				light_samples += drawLightSample(gsi, wo, material, rng);
			}
			res += throughput * (light_samples / LIGHT_SAMPLES);

			if(depth < (MAX_DEPTH - 1))
			{
				BSDFSample bsdf_sample = sampleBSDF(gsi, wo, material, rng);
				if(bsdf_sample.pdf > 0)
				{
					vec3 next_dir_world = bsdf_sample.direction;
					ray.origin = gsi.position;
					ray.direction = next_dir_world;
					vec3 ray_normal = geometry_normal_world;
					if(dot(ray_normal, ray.direction) < 0) ray_normal = -ray_normal;
					range.x = rayTMin(ray, ray_normal);

					const float cos_theta = abs(dot(gsi.shading_normal, ray.direction));

					throughput *= (bsdf_sample.bsdf * cos_theta / bsdf_sample.pdf);
					if(any(isWrong(throughput)))
					{
						throughput = vec3(0);
					}
				}
				else
				{
					throughput*= 0; 	
				}
				
			}

			if(!nonZero(throughput))
			{
				break;
			}
		}
		++depth;
	}
	return res;
}

struct CameraSample
{
	Ray ray;
	float pdf;
	float importance;
};

vec2 SampleUniformPointOnIsocelesTriangle(inout rng_t rng, float half_angle)
{
	vec2 xi = randomVec2_01(rng);
	vec2 uv = xi;
	if(uv.x + uv.y > 1)
	{
		uv = 1.0 - uv;
	}
	const mat2 edges = mat2(vec2(cos(-half_angle), sin(-half_angle)), vec2(cos(half_angle), sin(half_angle)));
	
	vec2 res = edges * uv;
	return res;
}

vec2 SampleUniformPointOnEquilateralTriangle(inout rng_t rng)
{
	const float half_angle = PI/6;
	const mat2 edges = mat2(vec2(cos(-half_angle), sin(-half_angle)), vec2(cos(half_angle), sin(half_angle)));
	const vec2 base = -edges * vec2(1.0 / 3.0);
	return (SampleUniformPointOnIsocelesTriangle(rng, half_angle) + base) * 2;
}

vec2 SampleUniformPointOnCenteredRegularPolygon(inout rng_t rng, uint sides)
{
	vec2 res;
	if(sides == 0)
	{
		res = randomUniformPointInUnitDiskFromPolar(rng);
	}
	else if(sides == 1)
	{
		res.x = (randomFloat01(rng) * 2 - 1);
		res.y = 0;
	}
	else if(sides == 3)
	{
		res = SampleUniformPointOnEquilateralTriangle(rng);
	}
	else if(sides == 4)
	{
		res = (randomVec2_01(rng) * 2 - 1) * oo_SQRT_2;
	}
	else
	{
		uint side = randomUint(rng) % sides;
		
		float rotation_angle = float(side) * TWO_PI / float(sides);
		mat2 R = Rotation2(rotation_angle);


		float opening_angle = TWO_PI / float(sides);
		
		vec2 point_on_triangle = SampleUniformPointOnIsocelesTriangle(rng, opening_angle / 2);

		res = R * point_on_triangle;
		
	}
	return res;
}

CameraSample Sample_We(inout rng_t rng, uvec2 pixel, vec2 oo_dims)
{
	CameraSample res;
	res.pdf = 0;
	res.importance = 0;

	res.importance = 1;
	res.pdf = 1;
	res.ray.origin = vec3(0);

	const vec2 subpixel_uv = lerp(0.0.xx, 1..xx, randomVec2_01(rng));
	const vec2 uv = (vec2(pixel) + subpixel_uv) * oo_dims;

#if 0
	const mat4 p2c = GetCameraProjToCam(ubo.camera);
	const mat3 c2w_dir = mat3(GetCameraCamToWorld(ubo.camera));

	vec4 dir_h = p2c * vec4(UVToClipSpace(uv), 1, 1);
	//dir_h.xyz = c2w_dir * normalize(dir_h.xyz);

	res.ray.direction = normalize(dir_h.xyz);
#else 

	const float radius = GetPerspectiveCameraApertureRadius(ubo.camera);
	const float lens_distance = GetPerspectiveCameraInvTan(ubo.camera);
	vec3 direction_cam = vec3(UVToClipSpace(uv) * vec2(oo_dims.y / oo_dims.x, 1), lens_distance);
	vec3 direction_cam_norm = normalize(direction_cam);
	vec3 direction = direction_cam_norm;
	vec2 point_on_lens = vec2(0);
	res.ray.direction = (direction);
	if(radius > 0)
	{
		point_on_lens = Rotation2(GetPerspectiveCameraApertureRotation(ubo.camera)) * SampleUniformPointOnCenteredRegularPolygon(rng, GetPerspectiveCameraApertureShape(ubo.camera));
		
		const float focal_distance = GetPerspectiveCameraFocalDistance(ubo.camera);
		float ft = focal_distance / (direction_cam_norm.z);
		vec3 point_of_focus = sampleRay(res.ray, ft);

		res.ray.origin += radius * vec3(point_on_lens, 0);
		res.ray.direction = normalize(point_of_focus - res.ray.origin);
	}

#endif

	const mat4x3 cam_to_world = GetCameraCamToWorld(ubo.camera);
	
	res.ray = TransformAssumeRigid(cam_to_world, res.ray);

	return res;
}

void main()
{
	const uvec2 gid = uvec2(gl_GlobalInvocationID.xy);
	const uvec2 pixel = gid;
	const uvec2 dims = imageSize(Target);
	const vec2 oo_dims = rcp(dims);
	if(all(lessThan(pixel, dims)))
	{
		rng_t rng = hash(pixel) ^ hash(ubo.frame_idx);

#if DEBUG_ENABLE_DEBUG_GLOBAL_SIGNAL
		if(pixel == debug_pixel)
		{
			rng = 12;
			_g_debug_signal = true;
			caret = Caret2D(vec2(debug_pixel), 0);
			caret = pushToDebugPixLn("\Debug", caret, vec4(1, 0, 1, 0.8), vec4(0..xxx, 0.5));

			caret = Caret2D(vec2(100, 100), 0);
		}
#endif
		vec3 res = 0..xxx;

		CameraSample camera_sample = Sample_We(rng, pixel, oo_dims);

		if(camera_sample.pdf > 0 && nonZero(camera_sample.importance.xxx))
		{
			res = trace(camera_sample.ray, rng) * camera_sample.importance / camera_sample.pdf;
		}

		
		//res = subpixel_uv.xyx;
		//res = ray.direction;

#if I_WANT_TO_DEBUG && DEBUG_ENABLE_DEBUG_GLOBAL_SIGNAL
		if(distance(vec2(pixel), vec2(debug_pixel)) < 0)
		{
			res = vec3(1, 0, 1);
		}
#endif

		imageStore(Target, ivec2(pixel), vec4(res, 1));
	}
}
#version 460

#define I_WANT_TO_DEBUG 0
// #define DEBUG_ENABLE_DEBUG_GLOBAL_SIGNAL 1
#include <ShaderLib:/Debug/DebugBuffers.glsl>

#include "common.glsl"

#include "shading.glsl"

#define BINDING SHADER_DESCRIPTOR_BINDING + 0

layout(BINDING + 0, rgba32f) uniform restrict readonly image2D AlbedoTexture;
layout(BINDING + 1, rgba32f) uniform restrict readonly image2D PositionTexture;
layout(BINDING + 2, rgba32f) uniform restrict readonly image2D NormalTexture;
layout(BINDING + 3, rgba32f) uniform restrict readonly image2D TangentTexture;

layout(BINDING + 4) uniform sampler2D AOTexture;

layout(BINDING + 5, rgba16f) uniform restrict writeonly image2D ColorOutput;

layout(local_size_x = 16, local_size_y = 16) in;

#ifndef USE_AO
#define USE_AO 0
#endif

void main()
{
	const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	const ivec2 dims = imageSize(AlbedoTexture);

	if(all(lessThan(pixel, dims)))
	{
		const vec2 screen_uv = (vec2(pixel) + 0.5) / vec2(dims);

		const bool force_white_albedo = false;
		vec3 albedo;
		if(force_white_albedo)
		{
			albedo = vec3(1);
		}
		else
		{
			albedo = imageLoad(AlbedoTexture, pixel).xyz;
		}


		const vec3 position = imageLoad(PositionTexture, pixel).xyz;
		const vec3 normal = imageLoad(NormalTexture, pixel).xyz;
		const vec3 tangent = imageLoad(TangentTexture, pixel).xyz;

#if DEBUG_ENABLE_DEBUG_GLOBAL_SIGNAL
		if(pixel == ivec2(100, 100))
		{
			_g_debug_signal = true;
		}
#endif

		GeometryShadingInfo geom;
		geom.position = position;
		// TODO
		geom.geometry_normal = normal;
		geom.vertex_shading_normal = normal;
		geom.shading_normal = normal;
		geom.shading_tangent = tangent;

		uint material_id = 0;
		PBMaterialData material;
		material.albedo = albedo;
		material.flags = MATERIAL_TYPE_PB | MATERIAL_FLAG_REFLECTION_BIT;
		material.metallic = 0;
		material.roughness = 1;
		material.cavity = 0;
		
		vec3 camera_position = (inverse(ubo.world_to_camera) * vec4(0..xxx, 1)).xyz;
		vec3 wo = vec3(1, 0, 0);

		vec3 shaded = shade(geom, wo, material);

		float ao = 1;
#if USE_AO
		ao = textureLod(AOTexture, screen_uv, 0).x;
#endif
		vec3 ambiant = ao * albedo * scene_ubo.ambient;
		vec3 res = shaded + ambiant;

		if(any(isWrong(res)))
		{
			Caret c = Caret2D(pixel, 0);
			c = pushToDebugPixLn(normal, c);
		}

		res = fixExtremeToZero(res);

		imageStore(ColorOutput, pixel, vec4(res, 0));
	}

    
}
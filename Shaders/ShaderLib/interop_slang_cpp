#pragma once

#if __cplusplus

#define typealias using

#define CPP_ONLY(X) X
#define SLANG_ONLY(X)

// Use a common concept name between C++ and Slang
#define CONCEPT_TYPE(CONCEPT, TYPE) CONCEPT TYPE

#define CONCEPT_2_TYPE(CPP_CONCEPT, SLANG_CONCEPT, TYPE) CONCEPT_TYPE(CPP_CONCEPT, TYPE)

#define REQUIRE_CLAUSE(C) requires (C)

#define CONST_REF(...) __VA_ARGS__ const&
#define MUTABLE_REF(...) __VA_ARGS__ &
#define OUT_REF(...) MUTABLE_REF(__VA_ARGS__)

#define FLOATING_POINT_CONCEPT std::floating_point

#elif _slang

#define template __generic
#define constexpr
#define noexecpt

#define CPP_ONLY(X)
#define SLANG_ONLY(X) X

// Use a common concept name between C++ and Slang
#define CONCEPT_TYPE(CONCEPT, TYPE) typename TYPE : CONCEPT

#define CONCEPT_2_TYPE(CPP_CONCEPT, SLANG_CONCEPT, TYPE) CONCEPT_TYPE(SLANG_CONCEPT, TYPE)

#define REQUIRE_CLAUSE(C) where (C)

#define CONST_REF(...) const in __VA_ARGS__ 
#define MUTABLE_REF(...) inout __VA_ARGS__ 
#define OUT_REF(...) out __VA_ARGS__

#define FLOATING_POINT_CONCEPT __BuiltinFloatingPointType

#endif

#define CREF(...) CONST_REF(__VA_ARGS__)
#define MREF(...) MUTABLE_REF(__VA_ARGS__)
#define OREF(...) OUT_REF(__VA_ARGS__)

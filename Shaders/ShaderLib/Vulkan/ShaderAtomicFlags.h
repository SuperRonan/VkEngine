
#pragma once

#define SHADER_ATOMIC_LOCATION_BUFFER 0 
#define SHADER_ATOMIC_LOCATION_IMAGE 1 
#define SHADER_ATOMIC_LOCATION_SHARED_MEMORY 2
#define SHADER_ATOMIC_LOCATION_SPARSE_IMAGE 3
#define SHADER_ATOMIC_LOCATIONS_COUNT 4

#define SHADER_ATOMIC_FLOAT_OP_EXCHANGE 0
#define SHADER_ATOMIC_FLOAT_OP_XCHG SHADER_ATOMIC_FLOAT_OP_EXCHANGE
#define SHADER_ATOMIC_FLOAT_OP_ADD 1
#define SHADER_ATOMIC_FLOAT_OP_MIN_MAX 2
#define SHADER_ATOMIC_FLOAT_OPS_COUNT 3

#define SHADER_ATOMIC_FLOAT_16 0
#define SHADER_ATOMIC_FLOAT_half SHADER_ATOMIC_FLOAT_16
#define SHADER_ATOMIC_FLOAT_32 1
#define SHADER_ATOMIC_FLOAT_float SHADER_ATOMIC_FLOAT_32
#define SHADER_ATOMIC_FLOAT_64 2
#define SHADER_ATOMIC_FLOAT_double SHADER_ATOMIC_FLOAT_64
#define SHADER_ATOMIC_FLOAT_PRECISIONS_COUNT 3


#define SHADER_ATOMIC_FLOAT_BIT_INDEX(OP, LOCATION) (SHADER_ATOMIC_LOCATION_ ## LOCATION * SHADER_ATOMIC_FLOAT_OPS_COUNT + SHADER_ATOMIC_FLOAT_OP_ ## OP)

#define SHADER_ATOMIC_FLOAT_BIT(OP, LOCATION) (1 << SHADER_ATOMIC_FLOAT_BIT_INDEX(OP, LOCATION))

#ifndef SHADER_ATOMIC_FLOAT_16_FLAGS
#define SHADER_ATOMIC_FLOAT_16_FLAGS 0
#endif

#ifndef SHADER_ATOMIC_FLOAT_32_FLAGS
#define SHADER_ATOMIC_FLOAT_32_FLAGS 0
#endif

#ifndef SHADER_ATOMIC_FLOAT_64_FLAGS
#define SHADER_ATOMIC_FLOAT_64_FLAGS 0
#endif

// PRECISION: 16, 32, 64 (or half, float, double)
// OP: EXCHANGE (XCHG), ADD, MIN_MAX
// LOCATION: BUFFER, IMAGE, SHARED_MEMORY, SPARSE_IMAGE
#define SHADER_ATOMIC_FLOAT_OP_IS_AVAILABLE(PRECISION, OP, LOCATION) (SHADER_ATOMIC_FLOAT_ ## PRECISION ## _FLAGS & SHADER_ATOMIC_FLOAT_BIT(OP, LOCATION))



CMAKE_MINIMUM_REQUIRED(VERSION 3.18.0)

SET(Project_Name "VkEngine")
PROJECT(${Project_Name})

SET(CMAKE_CXX_STANDARD 20)
SET(CMAKE_CXX_STANDARD_REQUIRED TRUE)

# GLFW
SET(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
SET(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
SET(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
ADD_SUBDIRECTORY(ext/glfw)
INCLUDE_DIRECTORIES(ext/glfw/include)
SET(GLFW_LIBS "glfw")

# GLM
ADD_SUBDIRECTORY(ext/glm)
INCLUDE_DIRECTORIES(ext/glm)
SET(GLM_LIBS "")

# Vulkan
OPTION(AUTO_LOCATE_VULKAN "AUTO_LOCATE_VULKAN" ON)

IF(AUTO_LOCATE_VULKAN)
	MESSAGE(STATUS "Attempting auto locate Vulkan using CMake...")

	FIND_PACKAGE(Vulkan)

	IF(NOT ${Vulkan_INCLUDE_DIRS} STREQUAL "")
		SET(VULKAN_PATH ${Vulkan_INCLUDE_DIRS})
		STRING(REGEX REPLACE "/Include" "" VULKAN_PATH ${VULKAN_PATH})
	ENDIF()

	IF(NOT Vulkan_FOUND)
		MESSAGE(STATUS "Failed to locate Vulkan SDK, retrying again...")
		IF(EXISTS "${VULKAN_PATH}")
			MESSAGE(STATUS "Successfully located the Vulkan SDK: ${VULKAN_PATH}")
		ELSE()
			MESSAGE("Error: Unable to locate Vulkan SDK. Please turn off auto locate option by specifying 'AUTO_LOCATE_VULKAN' as 'OFF'")
			MESSAGE("and specify manually path using 'VULKAN_SDK' and 'VULKAN_VERSION' variables in the CMakeLists.txt.")
			RETURN()
		ENDIF()
	ENDIF()

	MESSAGE(STATUS "Attempting to locate Vulkan SDK using manual path......")
	SET(VULKAN_SDK "C:/VulkanSDK")
	SET(VULKAN_VERSION "1.2.189.0")
	SET(VULKAN_PATH "${VULKAN_SDK}/${VULKAN_VERSION}")
	MESSAGE(STATUS "Using manual specified path: ${VULKAN_PATH}")

	IF(NOT EXISTS "${VULKAN_PATH}")
		MESSAGE("Error: Unable to locate this Vulkan SDK path VULKAN_PATH: ${VULKAN_PATH}, please specify correct path.
		For more information on correct installation process, please refer to subsection 'Getting started with Lunar-G SDK'
		and 'Setting up first project with CMake' in Chapter 3, 'Shaking hands with the device' in this book 'Learning Vulkan', ISBN - 9781786469809.")
	    RETURN()
	ENDIF()

ENDIF()

ADD_DEFINITIONS(-DVK_USE_PLATFORM_WIN32_KHR)

SET(VULKAN_LIBS "vulkan-1;shaderc;shaderc_util;glslang;SPIRV;SPIRV-Tools;GenericCodeGen;MachineIndependent;SPIRV-Tools-opt;spirv-cross-core;spirv-cross-glsl;OGLCompiler;HLSL;OSDependent")
SET(VULKAN_INCLUDES "${VULKAN_PATH}/Include")
SET(VULKAN_LIBS_DIR "${VULKAN_PATH}/Bin;${VULKAN_PATH}/Lib")
INCLUDE_DIRECTORIES(${VULKAN_INCLUDES})
LINK_DIRECTORIES(${VULKAN_LIBS_DIR})

# VMA
ADD_SUBDIRECTORY(ext/VMA)
INCLUDE_DIRECTORIES(ext/VMA/include)
SET(VMA_LIBS VulkanMemoryAllocator)

# VkEngine
SET(ALL_EXT_LIBS ${GLFW_LIBS} ${GLM_LIBS} ${VULKAN_LIBS} ${VMA_LIBS})

ADD_DEFINITIONS(-DNOMINMAX)

INCLUDE_DIRECTORIES(src)
INCLUDE_DIRECTORIES(ext)

FILE(GLOB VK_ENGINE_SOURCE src/Core/* src/Utils/* ext/SPIRV-Reflect/spirv_reflect.*)

SOURCE_GROUP(Core REGULAR_EXPRESSION src/Core/.*)
SOURCE_GROUP(Utils REGULAR_EXPRESSION src/Utils/.*)
SOURCE_GROUP("SPIRV-Reflect" REGULAR_EXPRESSION ext/SPIRV-Reflect/spirv_reflect.*)

ADD_LIBRARY(VkEngine STATIC ${VK_ENGINE_SOURCE})
SET_TARGET_PROPERTIES(VkEngine PROPERTIES LINKER_LANGUAGE CXX)
TARGET_COMPILE_DEFINITIONS(VkEngine PRIVATE "ENGINE_SRC_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}\"")
TARGET_COMPILE_DEFINITIONS(VkEngine PRIVATE "_ITERATOR_DEBUG_LEVEL=0")

ADD_EXECUTABLE(App0 src/App0/main.cpp)
TARGET_LINK_LIBRARIES(App0 ${ALL_EXT_LIBS} VkEngine)
TARGET_COMPILE_DEFINITIONS(App0 PRIVATE "ENGINE_SRC_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}\"")
TARGET_COMPILE_DEFINITIONS(App0 PRIVATE "_ITERATOR_DEBUG_LEVEL=0")

ADD_EXECUTABLE(GameOfLife src/GOL/main.cpp)
TARGET_LINK_LIBRARIES(GameOfLife ${ALL_EXT_LIBS} VkEngine)
TARGET_COMPILE_DEFINITIONS(GameOfLife PRIVATE "ENGINE_SRC_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}\"")
TARGET_COMPILE_DEFINITIONS(GameOfLife PRIVATE "_ITERATOR_DEBUG_LEVEL=0")

ADD_EXECUTABLE(Cloth src/Cloth/main.cpp)
TARGET_LINK_LIBRARIES(Cloth ${ALL_EXT_LIBS} VkEngine)
TARGET_COMPILE_DEFINITIONS(Cloth PRIVATE "ENGINE_SRC_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}\"")
TARGET_COMPILE_DEFINITIONS(Cloth PRIVATE "_ITERATOR_DEBUG_LEVEL=0")

INSTALL(TARGETS VkEngine DESTINATION lib)
INSTALL(TARGETS App0 GameOfLife DESTINATION bin)


#version 460

#include <ShaderLib:/common.glsl>
#include "common.glsl"

#extension GL_EXT_mesh_shader : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require

#define LOCAL_SIZE_X 32
#define MAX_VERTICES (LOCAL_SIZE_X * 4)
#define MAX_PRIMITIVES (LOCAL_SIZE_X * 2)

layout(location = 0) out perprimitiveEXT flat uint v_type[];
layout(location = 1) out vec2 v_uv[];

layout(SHADER_DESCRIPTOR_BINDING + 0, std430) buffer readonly restrict b_state
{
	Particule particules[];
} state;

layout(push_constant) uniform PushConstants
{
	mat4 matrix;
	float zoom;
    uint num_particules;
} _pc;

layout(local_size_x = LOCAL_SIZE_X) in;
layout(triangles, max_vertices = MAX_VERTICES, max_primitives = MAX_PRIMITIVES) out;

void main()
{
    const uint lid = gl_LocalInvocationIndex.x;
	const uint wid = gl_WorkGroupID.x;
	const uint gid = gl_GlobalInvocationID.x;

    const bool emit = gid < _pc.num_particules;

    const uint index = gid;

    const uint num_triangles = subgroupAdd(emit ? 2 : 0);

    if(subgroupElect())
	{
		SetMeshOutputsEXT(num_triangles * 2, num_triangles);
	}

    if(emit)
    {
        const uint subgroup_emit_id = subgroupExclusiveAdd(emit ? 1 : 0);

        const Particule p = state.particules[index];
        const float radius = p.radius;

        for(int i = 0; i < 2; ++i)
        {
            const float dx = float(i) - 0.5;
            for(int j = 0; j < 2; ++j)
            {
                const float dy = float(j) - 0.5;
                const uint vid = subgroup_emit_id * 4 + 2 * i + j; 
                v_uv[vid] = vec2(dx, dy);
                gl_MeshVerticesEXT[vid].gl_Position = _pc.matrix * vec4(p.position + vec2(dx, dy) * radius * 2, 1, 1);
            }
        }

        gl_PrimitiveTriangleIndicesEXT[subgroup_emit_id * 2 + 0] = uvec3(4 * subgroup_emit_id) + uvec3(0, 1, 2);
        gl_PrimitiveTriangleIndicesEXT[subgroup_emit_id * 2 + 1] = uvec3(4 * subgroup_emit_id) + uvec3(3, 2, 1);
        
        v_type[subgroup_emit_id * 2 + 0] = p.type;
        v_type[subgroup_emit_id * 2 + 1] = p.type;
    }
}
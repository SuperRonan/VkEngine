#pragma once

#include <ShaderLib:/common.glsl>

#define LIGHT_TYPE_POINT (0x1)
#define LIGHT_TYPE_DIRECTIONAL (0x2)
#define LIGHT_TYPE_SPOT (0x3)
#define LIGHT_TYPE_MASK (0x7)

#define LIGHT_ENABLE_SHADOW_MAP_BIT_INDEX 8
#define LIGHT_ENABLE_SHADOW_MAP_BIT (1 << LIGHT_ENABLE_SHADOW_MAP_BIT_INDEX)
#define LIGHT_SHADOW_MAP_BIAS_MODE_BIT_INDEX (LIGHT_ENABLE_SHADOW_MAP_BIT_INDEX + 1)
#define LIGHT_SHADOW_MAP_BIAS_MODE_MASK (0x3 << LIGHT_SHADOW_MAP_BIAS_MODE_BIT_INDEX)
#define LIGHT_SHADOW_MAP_BIAS_MODE_NONE (0 << LIGHT_SHADOW_MAP_BIAS_MODE_BIT_INDEX)
#define LIGHT_SHADOW_MAP_BIAS_MODE_OFFSET (0x1 << LIGHT_SHADOW_MAP_BIAS_MODE_BIT_INDEX)
#define LIGHT_SHADOW_MAP_BIAS_MODE_FLOAT_MULT (0x2 << LIGHT_SHADOW_MAP_BIAS_MODE_BIT_INDEX)
#define LIGHT_SHADOW_MAP_BIAS_MODE_FLOAT_ADD (0x3 << LIGHT_SHADOW_MAP_BIAS_MODE_BIT_INDEX)
#define LIGHT_SHADOW_MAP_BIAS_INCLUDE_THETA_BIT (0x1 << (LIGHT_SHADOW_MAP_BIAS_MODE_BIT_INDEX + 2))

#define SPOT_LIGHT_FLAGS_POS 16
#define SPOT_LIGHT_FLAG_ATTENUATION_MASK (0x3 << SPOT_LIGHT_FLAGS_POS)
#define SPOT_LIGHT_FLAG_ATTENUATION_LINEAR (0x1 << SPOT_LIGHT_FLAGS_POS)
#define SPOT_LIGHT_FLAG_ATTENUATION_QUADRATIC (0x2 << SPOT_LIGHT_FLAGS_POS)
#define SPOT_LIGHT_FLAG_ATTENUATION_ROOT (0x3 << SPOT_LIGHT_FLAGS_POS)


#define POINT_LIGHT_DEFAULT_Z_NEAR 0.1

struct Light
{
	vec3 position;
	uint flags;
	
	vec3 emission;
	// int or float
	uint shadow_bias_data;
	
	uvec4 textures;

	vec3 direction;
	uint pad;
	
	mat4 matrix;
};

float getLightZNear(const in Light l)
{
	//return POINT_LIGHT_DEFAULT_Z_NEAR;
	return l.matrix[0][0];
}
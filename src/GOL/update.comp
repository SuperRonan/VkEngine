#version 460 core

layout(local_size_x = 16, local_size_y=16) in;

uniform layout(set = 0, binding = 0, r8ui) restrict readonly uimage2D prev;

uniform layout(set = 0, binding = 1, r8ui) restrict writeonly uimage2D next;

uint readPrev(in ivec2 coord)
{
	const ivec2 dims = imageSize(prev);
	// Repeat mode
	// Assume coord can only be 1 pixel out of bounds
	//ivec2 offset = ivec2(0);
	for(int i=0; i<2; ++i)
	{
		if(coord[i] == dims[i])
			coord[i] = 0;
		else if(coord[i] == -1)
			coord[i] = dims[i] - 1;
	}
	return imageLoad(prev, coord).x;
}

// Example with 4 bits 
// +-------------------+
// | b0 | b1 | b2 | b3 |
// +-------------------+
// Becomes
// +-----------------------------------+
// | 000 b0 | 000 b1 | 000 b2 | 000 b3 |
// +-----------------------------------+
uint dispatch(uint byte)
{
	uint res = 0; 
	for(uint i=0; i<8; ++i)
	{
		res |= ((byte >> i) & 1) << (i * 4);
	}
	return res;
}

uint shiftLeft(uint byte, uint right)
{
	return (byte << 4) | ((right >> (7 * 4)) & 0xf);
}

uint shiftRight(uint byte, uint left)
{
	return (byte >> 4) | ((left & 0xf) << (7 * 4));
}


void main()
{
	const ivec2 gID = ivec2(gl_GlobalInvocationID.xy);

	const ivec2 dims = imageSize(prev);

	const int x = gID.x;
	const int y = gID.y;

	if(all(lessThan(gID, dims)))
	{
		const ivec2 center_coord = ivec2(x, y);
		const uint center = dispatch(imageLoad(prev, center_coord).x);
		
		const uint tl = dispatch(readPrev(center_coord + ivec2(-1, -1)));
		const uint t  = dispatch(readPrev(center_coord + ivec2(+0, -1)));
		const uint tr = dispatch(readPrev(center_coord + ivec2(+1, -1)));
		const uint r  = dispatch(readPrev(center_coord + ivec2(+1, +0)));
		const uint br = dispatch(readPrev(center_coord + ivec2(+1, +1)));
		const uint b  = dispatch(readPrev(center_coord + ivec2(+0, +1)));
		const uint bl = dispatch(readPrev(center_coord + ivec2(-1, +1)));
		const uint l  = dispatch(readPrev(center_coord + ivec2(-1, +0)));


		uint count = 0;
		
		count += t;
		count += b;

		// count += shiftLeft(t, tr);
		// count += shiftLeft(center, r);
		// count += shiftLeft(b, br);

		// count += shiftRight(t, tl);
		// count += shiftRight(center, l);
		// count += shiftRight(b, bl);

		count += shiftRight(t, tr);
		count += shiftRight(center, r);
		count += shiftRight(b, br);

		count += shiftLeft(t, tl);
		count += shiftLeft(center, l);
		count += shiftLeft(b, bl);

		uint res = 0;

		for(uint i = 0; i < 8; ++i)
		{
			const uint c = (count >> (4 * i)) & 0xf;
			const uint p = (center >> (4 * i)) & 1;
			bool alive = (c == 3) || ((p != 0) && (c == 2));
			
			res |= ((alive ? uint(1) : uint(0)) << i);
		}

		imageStore(next, center_coord, uvec4(res));
	}
}
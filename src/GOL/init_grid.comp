#version 460 core

#include <ShaderLib:/common.glsl>
#include <ShaderLib:/random.glsl>

layout(local_size_x = 16, local_size_y = 16) in;

layout(SHADER_DESCRIPTOR_BINDING + 0, r8ui) uniform restrict writeonly uimage2D grid;

layout(push_constant) uniform PushConstants
{
	uint gobal_seed;
} _pc;

void main()
{
	const uvec2 gid = gl_GlobalInvocationID.xy;

	if(all(lessThan(gid, imageSize(grid))))
	{
		const float p = 0.33;

		const uint seed = _pc.gobal_seed ^ hash(hash(gid.x) ^ gid.y);

		uint rng = seed;

		uint value = 0;
		for(uint i=0; i<8; ++i)
		{
			const float xi = randomFloat01(rng);
			const uint bit = (xi < p) ? 1 : 0;
			value |= (bit << i);
		}

		imageStore(grid, ivec2(gid), value.xxxx);
	}
}
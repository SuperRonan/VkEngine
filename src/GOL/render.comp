#version 460 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, r8ui) uniform restrict readonly uimage2D grid;

layout(set = 0, binding = 1, rgba8) uniform restrict writeonly image2D target;

layout(push_constant) uniform PushConstants
{
    mat4 matrix;
} _pc;

void main()
{
	const uvec2 gid = gl_GlobalInvocationID.xy;

    if(all(lessThan(gid, imageSize(target))))
    {
        vec2 uv = vec2(gid) / vec2(imageSize(target));

        uv = (uv - 0.5);

        uv = (mat3(_pc.matrix) * vec3(uv, 1)).xy;

        uv = fract(uv);
        
        const ivec2 packed_dims = imageSize(grid);
        const ivec2 unpacked_dims = packed_dims * ivec2(8, 1);

        const ivec2 px = ivec2(uv * packed_dims);

        const uint bit_idx = int(uv.x * packed_dims.x * 8) % 8;

        const uint bits = imageLoad(grid, px).x;
        const uint bit = (bits >> bit_idx) & 1; 

        const vec4 off_color = vec4(0, 0, 0, 0);
        const vec4 on_color = vec4(1, 0, 1, 1);
        const vec4 value = mix(off_color, on_color, float(bit));

        imageStore(target, ivec2(gid), value);
        //imageStore(target, ivec2(gid), vec4(uv.xy, 1.0 - uv.x - uv.y, 1));
    }
}